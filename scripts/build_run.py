#!/usr/bin/env python3
import subprocess
import sys
import os

# -----------------------------
# Configuration
# -----------------------------

# Project root
PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Subfolders inside build
BIN_DIR = os.path.join(PROJECT_DIR, "bin")
OBJ_DIR = os.path.join(PROJECT_DIR, "bin-int")

# Premake executable
PREMAKE_EXEC = os.path.join(PROJECT_DIR, "premake", "premake5")

# Premake generator for VSCode-friendly builds
GENERATOR = "gmake2"

# Default configuration
CONFIGURATION = "Debug"
if len(sys.argv) > 1 and sys.argv[1].lower() in ["debug", "release", "distribution"]:
    CONFIGURATION = sys.argv[1].capitalize()

# Name of the main executable
EXEC_NAME = "IgnisEditor"

# -----------------------------
# Utility functions
# -----------------------------
def run_command(cmd, cwd=None):
    print(f"> {' '.join(cmd)}")
    result = subprocess.run(cmd, cwd=cwd)
    if result.returncode != 0:
        sys.exit(result.returncode)

# -----------------------------
# Generate build files
# -----------------------------
def generate_build_files():
    # Create build folder and subfolders
    os.makedirs(BIN_DIR, exist_ok=True)
    os.makedirs(OBJ_DIR, exist_ok=True)
    # Run premake from project root; build files go to BUILD_DIR
    run_command([PREMAKE_EXEC, GENERATOR, f"--file={os.path.join(PROJECT_DIR, 'premake5.lua')}"], cwd=PROJECT_DIR)

# -----------------------------
# Build project
# -----------------------------
def build_project():
    # Run make inside the build directory (where makefiles are)
    run_command(["make", "verbose=1", f"CONFIG={CONFIGURATION}"], cwd=PROJECT_DIR)

# -----------------------------
# Run executable
# -----------------------------
def run_project():
    # Path to the executable generated by Premake inside build/bin
    exec_path = os.path.join(
        BIN_DIR,
        f"{CONFIGURATION}-macosx-ARM64",
        EXEC_NAME,
        EXEC_NAME
    )

    if os.path.exists(exec_path):
        # Make sure it's executable
        os.chmod(exec_path, 0o755)
        # Run the program with working directory as project root
        run_command([exec_path], cwd=PROJECT_DIR)
    else:
        print(f"Executable not found at {exec_path}. Make sure the build succeeded.")

# -----------------------------
# Main
# -----------------------------
def main():
    generate_build_files()
    build_project()
    run_project()

if __name__ == "__main__":
    main()
